on:
  release:
    types: [created, prereleased]

name: Release Builder

jobs:

  release_info:
    name: Get release information
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - id: get_version
        name: Get version
        shell: python
        run: |
          from __future__ import print_function
          import json, os, re, sys
          from subprocess import Popen, PIPE
          tag = re.sub(r'^refs/tags/', '', os.getenv('GITHUB_REF'))
          match = re.match(r'v(\d+\.\d+\.\d+(-.*)?)$', tag)
          if match:
            version = match.group(1)
          else:
            match = re.match(r'nightly\.\d{6}$', tag)
            if match:
              p = Popen(
                'cargo read-manifest --manifest-path jormungandr/Cargo.toml',
                shell=True,
                stdout=PIPE
              )
              d = json.load(p.stdout)
              version = re.sub(
                r'^(\d+\.\d+\.\d+)(-.*)?$',
                r'\1-' + match.group(0),
                d['version'],
                count=1
              )
            else:
              print('::error::unrecognized release tag format {0}'.format(tag))
              sys.exit(1)
          print('::set-output name=version::' + version)

  update_deps:
    name: Update dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Prune package versions for dependency cache key
        run: |
          perl -p - Cargo.lock > Cargo.lock.for-cache <<EOF
            BEGIN {
              $ln = 0; $ours = 0;
            }
            if (/^\[\[package\]\]/ .. ($ln == 2)) {
              if (/^name = "(jormungandr.*|jcli)"/) {
                $ours = 1;
              } else {
                s/^version =.*// if $ours;
              }
              ++$ln;
            } else {
              $ln = 0; $ours = 0;
            }
          EOF

      - name: Upload dependency cache key
        uses: actions/upload-artifact@v2
        with:
          name: deps-keyfile
          path: Cargo.lock.for-cache

      - id: cargo-registry
        name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
          key: cargo-registry-${{ hashFiles('Cargo.lock.for-cache') }}

      - if: ${{ steps.cargo-registry.outputs.cache-hit != 'true' }}
        id: ls-crates-io-index
        name: Get head commit hash of crates.io registry index
        continue-on-error: true
        shell: bash
        run: |
          commit=$(
            git ls-remote --heads https://github.com/rust-lang/crates.io-index.git master |
            cut -f 1
          )
          echo "::set-output name=head::$commit"
      - if: ${{ steps.cargo-registry.outputs.cache-hit != 'true' }}
        name: Cache cargo registry index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry/index
          key: cargo-index-${{ steps.ls-crates-io-index.outputs.head }}
          restore-keys: cargo-index-

      - if: ${{ steps.cargo-registry.outputs.cache-hit != 'true' }}
        name: Fetch dependencies
        run: cargo fetch --locked

  build_assets:
    name: Build assets
    needs: [release_info, update_deps]
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Linux
          - {os: ubuntu-latest, target: x86_64-unknown-linux-gnu}
          # Macos
          - {os: macos-latest, target: x86_64-apple-darwin}
        target_cpu: [generic, broadwell]
        toolchain: [stable]
        cross: [false]
        include:
          # Windows
          - config: {os: windows-latest, target: x86_64-pc-windows-gnu}
            target_cpu: generic
            toolchain: stable-x86_64-pc-windows-gnu
            cross: false
          - config: {os: windows-latest, target: x86_64-pc-windows-gnu}
            target_cpu: broadwell
            toolchain: stable-x86_64-pc-windows-gnu
            cross: false
          - config: {os: windows-latest, target: x86_64-pc-windows-msvc}
            target_cpu: generic
            toolchain: stable-x86_64-pc-windows-msvc
            cross: false
          - config: {os: windows-latest, target: x86_64-pc-windows-msvc}
            target_cpu: broadwell
            toolchain: stable-x86_64-pc-windows-msvc
            cross: false
          # Cross targets
          - config: {os: ubuntu-latest, target: aarch64-unknown-linux-gnu}
            target_cpu: generic
            toolchain: stable
            cross: true
          - config: {os: ubuntu-latest, target: arm-unknown-linux-gnueabi}
            target_cpu: generic
            toolchain: stable
            cross: true
          - config: {os: ubuntu-latest, target: armv7-unknown-linux-gnueabihf}
            target_cpu: generic
            toolchain: stable
            cross: true
          - config: {os: ubuntu-latest,  target: x86_64-unknown-linux-musl}
            target_cpu: generic
            toolchain: stable
            cross: true
          - config: {os: ubuntu-latest,  target: x86_64-unknown-linux-musl}
            target_cpu: broadwell
            toolchain: stable
            cross: true
          - config: {os: ubuntu-latest, target: aarch64-linux-android}
            target_cpu: generic
            toolchain: stable
            cross: true
          # - config: {os: ubuntu-latest, target: mips64el-unknown-linux-gnuabi64}
          #   target_cpu: generic
          #   toolchain: stable
          #   cross: true
          # - config: {os: ubuntu-latest, target: powerpc64le-unknown-linux-gnu}
          #   target_cpu: generic
          #   toolchain: stable
          #   cross: true
    steps:

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.config.target }}
          override: true
          default: true

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Download dependency cache key
        uses: actions/download-artifact@v2
        with:
          name: deps-keyfile

      - name: Restore cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
          key: cargo-registry-${{ hashFiles('Cargo.lock.for-cache') }}

      - name: Create .cargo/config.toml
        shell: bash
        run: |
          mkdir .cargo
          cat > .cargo/config.toml <<EOF
          [target.${{ matrix.config.target }}]
          rustflags = ["-C", "target-cpu=${{ matrix.target_cpu }}", "-C", "lto"]
          EOF

      - if: ${{ matrix.cross }}
        name: Create Cross.toml
        shell: bash
        run: |
          cat > Cross.toml <<EOF
          [build.env]
          passthrough = ["DATE"]
          EOF

      - name: Get current date
        shell: bash
        run: |
          echo "::set-env name=DATE::$(date +%Y%m%d)"

      - name: Build jormungandr
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: >
            --manifest-path jormungandr/Cargo.toml
            --bin jormungandr
            --no-default-features
            --verbose
            --locked
            --release
            --target ${{ matrix.config.target }}

      - name: Build jcli
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: >
            --manifest-path jcli/Cargo.toml
            --bin jcli
            --verbose
            --locked
            --release
            --target ${{ matrix.config.target }}

      - name: Pack binaries (Unix)
        if: matrix.config.os != 'windows-latest'
        run: |
          archive=jormungandr-${{ needs.release_info.outputs.version }}-${{ matrix.config.target }}-${{ matrix.target_cpu }}.tar.gz
          tar -C ./target/${{ matrix.config.target }}/release -czvf $archive jormungandr jcli
          echo "::set-env name=RELEASE_ARCHIVE::$archive"
          echo "::set-env name=RELEASE_CONTENT_TYPE::application/gzip"

      - name: Pack binaries (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          $archive = "jormungandr-${{ needs.release_info.outputs.version }}-${{ matrix.config.target }}-${{ matrix.target_cpu }}.zip"
          $args = @{
            Path  = "./target/${{ matrix.config.target }}/release/jormungandr.exe",
                    "./target/${{ matrix.config.target }}/release/jcli.exe"
            DestinationPath = $archive
          }
          Compress-Archive @args
          echo "::set-env name=RELEASE_ARCHIVE::$archive"
          echo "::set-env name=RELEASE_CONTENT_TYPE::application/zip"

      - name: Upload binaries to nightly release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.RELEASE_ARCHIVE }}
          asset_name: ${{ env.RELEASE_ARCHIVE }}
          asset_content_type: ${{ env.RELEASE_CONTENT_TYPE }}

  publish_release:
    name: Publish release
    needs: [release_info, build_assets]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          hub release edit --draft=false \
            -m 'Release ${{ needs.release_info.outputs.version }}' \
            ${GITHUB_REF#refs/tags/}
