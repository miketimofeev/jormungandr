on:
  push:
    branches:
      - 'ci/test/nightly' # For testing nightly build workflow

name: Release1

jobs:
  create_release:
    name: Create release
    if: >
      github.repository_owner == 'input-output-hk'
      || startsWith(github.ref, 'refs/heads/ci/test/')
      || startsWith(github.ref, 'refs/tags/') && contains(github.ref, '-ci-test.')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release_info.outputs.version }}
      tag: ${{ steps.release_info.outputs.tag }}
      date: ${{ steps.release_info.outputs.date }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - id: release_info
        name: Get release information
        run: python3 ci/release-info.py "$GITHUB_EVENT_NAME"

      - if: ${{ steps.release_info.outputs.release_type == 'nightly' }}
        name: Delete existing nightly releases
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          git ls-remote --tags --refs origin 'refs/tags/nightly*' |
          cut -f 2 |
          while read ref; do
            hub release delete ${ref#refs/tags/}
            git push --delete origin $ref
          done
      - id: create_release
        name: Create a draft release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_tag='${{ steps.release_info.outputs.tag }}'
          hub release create ${{ steps.release_info.outputs.release_flags }} --draft \
            -m "Release ${{ steps.release_info.outputs.version }} (in progress)" \
            -t $GITHUB_SHA $release_tag
          upload_url=$(hub release show -f '%uA' $release_tag)
          echo "::set-output name=upload_url::$upload_url"
  cache_info:
    name: Bootstrap cache
    if: >
      github.repository_owner == 'input-output-hk'
      || startsWith(github.ref, 'refs/heads/ci/test/')
      || startsWith(github.ref, 'refs/tags/') && contains(github.ref, '-ci-test.')
    runs-on: ubuntu-latest
    outputs:
      crates-io-index-head: ${{ steps.ls-crates-io-index.outputs.head }}
      cargo-lock-hash: ${{ steps.hash-cargo-lock.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - id: ls-crates-io-index
        name: Get head commit hash of crates.io registry index
        run: |
          commit=$(
            git ls-remote --heads https://github.com/rust-lang/crates.io-index.git master |
            cut -f 1
          )
          echo "$commit"
          echo "::set-output name=head::$commit"
      - id: hash-cargo-lock
        name: Calculate dependency cache key
        run: |
          hash=$(
            ci/strip-own-version-from-cargo-lock.pl Cargo.lock |
            sha1sum | cut -d ' ' -f 1
          )
          echo "$hash"
          echo "::set-output name=hash::$hash"
  update_deps:
    name: Update dependencies
    needs: cache_info
    runs-on: ubuntu-latest
    steps:
      - name: Cache cargo registry index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry/index
          key: cargo-index-${{ needs.cache_info.outputs.crates-io-index-head }}
          restore-keys: cargo-index-

      - id: cargo-deps
        name: Cache cargo dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: cargo-deps-v1-${{ needs.cache_info.outputs.cargo-lock-hash }}

      - name: Check out the repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch dependencies and update cargo registry
        run: cargo fetch --locked

  build_assets:
    name: Build assets
    needs: [create_release, cache_info, update_deps]
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Macos
          - { os: macos-latest, target: x86_64-apple-darwin }
        target_cpu: [generic]
        toolchain: [stable]
    steps:
      - run: ls /usr/local/opt/runner/settings/instancename

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.config.target }}
          override: true
          default: true

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Restore cargo registry index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry/index
          key: cargo-index-${{ needs.cache_info.outputs.crates-io-index-head }}

      - name: Restore cargo dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: cargo-deps-v1-${{ needs.cache_info.outputs.cargo-lock-hash }}

      - name: Create .cargo/config.toml
        shell: bash
        run: |
          mkdir .cargo
          cat > .cargo/config.toml <<EOF
          [target.${{ matrix.config.target }}]
          rustflags = ["-C", "target-cpu=${{ matrix.target_cpu }}", "-C", "lto", "-C", "embed-bitcode=yes"]
          EOF
      - name: Build jcli
        uses: actions-rs/cargo@v1
        env:
          DATE: ${{ needs.create_release.outputs.date }}
        with:
          command: build
          args: >
            --manifest-path jcli/Cargo.toml
            --bin jcli
            --verbose
            --locked
            --release
            --target ${{ matrix.config.target }}
      - name: List the binary file with block information
        run: |
          cd target/${{ matrix.config.target }}/release
          ls -las jcli
      - name: Check that the binary is usable
        run: target/${{ matrix.config.target }}/release/jcli --version

      - name: Checksum the binary
        run: |
          cd target/${{ matrix.config.target }}/release
          shasum jcli > ${{ runner.temp }}/checksum
      - name: Pack the binary
        run: |
          sudo /usr/sbin/purge
          cd ./target/${{ matrix.config.target }}/release
          ls -las jcli
          archive=${{ runner.temp }}/archive.tar.gz
          tar -C ./target/${{ matrix.config.target }}/release -czvf $archive jcli
          cat <<EOF >> $GITHUB_ENV
          RELEASE_ARCHIVE=$archive
          EOF
      - name: Unpack, check the binary and verify checksum
        run: |
          mkdir archive-test
          tar -C archive-test -xzSvf $RELEASE_ARCHIVE
          cd archive-test
          ls -las jcli
          ./jcli --version || :
          shasum -c ${{ runner.temp }}/checksum
