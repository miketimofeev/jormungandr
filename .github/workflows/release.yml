on:
  push:
    tags:
      - 'v[0-9]+.*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Release

jobs:
  create_release:
    name: Create draft release
    if: ${{ github.repository_owner == 'input-output-hk' }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Get version from tag name
        id: version
        run: echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        run: |
          release_tag=${GITHUB_REF#refs/tags/}
          hub release create --draft \
            -m "Release ${{ steps.version.outputs.version }} (in progress)" \
            $release_tag
          upload_url=$(hub release show -f '%uA' $release_tag)
          echo "::set-output name=upload_url::$upload_url"

  update_deps:
    name: Update dependencies
    if: ${{ github.repository_owner == 'input-output-hk' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - id: cargo-registry
        name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ hashFiles('Cargo.lock') }}

      - if: ${{ steps.cargo-registry.outputs.cache-hit != 'true' }}
        id: ls-crates-io-index
        name: Get head commit hash of crates.io registry index
        continue-on-error: true
        shell: bash
        run: |
          commit=$(
            git ls-remote --heads https://github.com/rust-lang/crates.io-index.git master |
            cut -f 1
          )
          echo "::set-output name=head::$commit"
      - if: ${{ steps.cargo-registry.outputs.cache-hit != 'true' }}
        name: Cache cargo registry index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry/index
          key: cargo-index-${{ steps.ls-crates-io-index.outputs.head }}
          restore-keys: |
            cargo-index-

      - if: ${{ steps.cargo-registry.outputs.cache-hit != 'true' }}
        name: Fetch dependencies
        run: cargo fetch --locked

      - if: ${{ steps.cargo-registry.outputs.cache-hit != 'true' }}
        name: Prune unpacked sources of dependency crates from cache
        shell: bash
        run: |
          rm -rf ~/.cargo/registry/src

  build_assets:
    name: Build assets
    if: ${{ github.repository_owner == 'input-output-hk' }}
    needs: [create_release, update_deps]
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Linux
          - {os: ubuntu-latest, target: x86_64-unknown-linux-gnu}
          # Macos
          - {os: macos-latest, target: x86_64-apple-darwin}
        target_cpu: [generic, broadwell]
        toolchain: [stable]
        cross: [false]
        include:
          # Windows
          - config: {os: windows-latest, target: x86_64-pc-windows-gnu}
            target_cpu: generic
            toolchain: stable-x86_64-pc-windows-gnu
            cross: false
          - config: {os: windows-latest, target: x86_64-pc-windows-gnu}
            target_cpu: broadwell
            toolchain: stable-x86_64-pc-windows-gnu
            cross: false
          - config: {os: windows-latest, target: x86_64-pc-windows-msvc}
            target_cpu: generic
            toolchain: stable-x86_64-pc-windows-msvc
            cross: false
          - config: {os: windows-latest, target: x86_64-pc-windows-msvc}
            target_cpu: broadwell
            toolchain: stable-x86_64-pc-windows-msvc
            cross: false
          # Cross targets
          - config: {os: ubuntu-latest, target: aarch64-unknown-linux-gnu}
            target_cpu: generic
            toolchain: stable
            cross: true
          - config: {os: ubuntu-latest, target: arm-unknown-linux-gnueabi}
            target_cpu: generic
            toolchain: stable
            cross: true
          - config: {os: ubuntu-latest, target: armv7-unknown-linux-gnueabihf}
            target_cpu: generic
            toolchain: stable
            cross: true
          - config: {os: ubuntu-latest,  target: x86_64-unknown-linux-musl}
            target_cpu: generic
            toolchain: stable
            cross: true
          - config: {os: ubuntu-latest,  target: x86_64-unknown-linux-musl}
            target_cpu: broadwell
            toolchain: stable
            cross: true
          - config: {os: ubuntu-latest, target: aarch64-linux-android}
            target_cpu: generic
            toolchain: stable
            cross: true
          # - config: {os: ubuntu-latest, target: mips64el-unknown-linux-gnuabi64}
          #   target_cpu: generic
          #   toolchain: stable
          #   cross: true
          # - config: {os: ubuntu-latest, target: powerpc64le-unknown-linux-gnu}
          #   target_cpu: generic
          #   toolchain: stable
          #   cross: true
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.config.target }}
          override: true
          default: true

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      # https://github.com/actions/runner/issues/498
      - if: ${{ runner.os == 'Windows' }}
        name: Fix up Cargo.lock hash
        shell: powershell
        run: |
          ((Get-Content Cargo.lock) -join "`n") + "`n" |
          Set-Content -NoNewline Cargo.lock

      # https://github.com/actions/virtual-environments/issues/895
      # https://github.com/actions/virtual-environments/issues/936
      - if: ${{ runner.os == 'Windows' }}
        name: Clean up cargo registry files
        run: rm -r -fo $env:UserProfile\.cargo\registry

      - name: Restore cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ hashFiles('Cargo.lock') }}

      - name: Create .cargo/config.toml
        shell: bash
        run: |
          mkdir .cargo
          cat > .cargo/config.toml <<EOF
          [target.${{ matrix.config.target }}]
          rustflags = ["-C", "target-cpu=${{ matrix.target_cpu }}", "-C", "lto"]
          EOF

      - name: Build jormungandr
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: |
            --manifest-path jormungandr/Cargo.toml
            --bin jormungandr
            --no-default-features
            --verbose
            --locked
            --release
            --target ${{ matrix.config.target }}

      - name: Build jcli
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: |
            --manifest-path jcli/Cargo.toml
            --bin jcli
            --verbose
            --locked
            --release
            --target ${{ matrix.config.target }}

      - name: Pack binaries (Unix)
        if: matrix.config.os != 'windows-latest'
        run: |
          archive=jormungandr-${{ needs.create_release.outputs.version }}-${{ matrix.config.target }}-${{ matrix.target_cpu }}.tar.gz
          tar -C ./target/${{ matrix.config.target }}/release -czvf $archive jormungandr jcli
          echo "::set-env name=RELEASE_ARCHIVE::$archive"
          echo "::set-env name=RELEASE_CONTENT_TYPE::application/gzip"

      - name: Pack binaries (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          $archive = "jormungandr-${{ needs.create_release.outputs.version }}-${{ matrix.config.target }}-${{ matrix.target_cpu }}.zip"
          $args = @{
            Path  = "./target/${{ matrix.config.target }}/release/jormungandr.exe",
                    "./target/${{ matrix.config.target }}/release/jcli.exe"
            DestinationPath = $archive
          }
          Compress-Archive @args
          echo "::set-env name=RELEASE_ARCHIVE::$archive"
          echo "::set-env name=RELEASE_CONTENT_TYPE::application/zip"

      - name: Upload binaries to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ env.RELEASE_ARCHIVE }}
          asset_name: ${{ env.RELEASE_ARCHIVE }}
          asset_content_type: ${{ env.RELEASE_CONTENT_TYPE }}

  publish_release:
    name: Publish release
    if: ${{ github.repository_owner == 'input-output-hk' }}
    needs: [create_release, build_assets]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_tag=${GITHUB_REF#refs/tags/}
          hub release edit --draft=false \
            -m 'Release ${{ needs.create_release.outputs.version }}' \
            $release_tag
